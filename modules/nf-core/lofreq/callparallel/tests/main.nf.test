nextflow_process {

    name "Test Process LOFREQ_CALLPARALLEL"
    script "../main.nf"
    process "LOFREQ_CALLPARALLEL"

    tag "modules"
    tag "modules_nfcore"
    tag "lofreq"
    tag "lofreq/callparallel"

    test("sarscov2 - bam") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                        []
                        ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true) // fasta
                input[2] = file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true) // fai
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert path(process.out.vcf.get(0).get(1)).linesGzip.contains('##INFO=<ID=CONSVAR,Number=0,Type=Flag,Description="Indicates that the variant is a consensus variant (as opposed to a low frequency variant).">') }
            )
        }

    }

    test("sarscov2 - bam - bed") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                        file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true)
                        ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true) // fasta
                input[2] = file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true) // fai
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() },
                { assert path(process.out.vcf.get(0).get(1)).linesGzip.contains('##INFO=<ID=CONSVAR,Number=0,Type=Flag,Description="Indicates that the variant is a consensus variant (as opposed to a low frequency variant).">') }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                        []
                        ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true) // fasta
                input[2] = file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true) // fai
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
