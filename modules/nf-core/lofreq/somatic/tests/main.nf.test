nextflow_process {

    name "Test Process LOFREQ_SOMATIC"
    script "../main.nf"
    process "LOFREQ_SOMATIC"

    tag "modules"
    tag "modules_nfcore"
    tag "lofreq"
    tag "lofreq/somatic"

    test("human - bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
                ]
                input[1] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                ]
                input[2] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.vcf[0][1][1]).linesGzip.toString().contains('##INFO=<ID=CONSVAR,Number=0,Type=Flag,Description="Indicates that the variant is a consensus variant (as opposed to a low frequency variant).') },
                { assert snapshot(
                    process.out.vcf[0][1].size(),
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
                ]
                input[1] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                ]
                input[2] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out ).match() }
            )
        }

    }

}
